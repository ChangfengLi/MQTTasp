/******************************************************************************
* Copyright (c) 2000-2021 Ericsson Telecom AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributors:
*   Balasko, Jeno
*   Lovassy, Arpad
*   Szabo, Janos Zoltan â€“ initial implementation
*
******************************************************************************/
// TTCN-3 version of "Hello, world!"
module MyExample
{
//   type charstring Topic;
//   type charstring Data;

//   type record MQTT_Data {    // kept for compatibility
// 	  Data       data,
// 	  Topic       pub optional,
//     Topic       sub optional
//   }

// type port PCOType message
// {
//   inout charstring;
//   out  MQTT_Data;
// }
import from MQTTasp_Types all;
import from MQTTasp_PortType all;

type component MTCType
{
  port MQTTasp_PT MyPCO;
}

testcase HelloW0() runs on MTCType system MTCType
{
  var MQTT_Data send1 := {"hello", "pub_test","TTCN1"};
  timer T := 20.0;
  map(mtc:MyPCO, system:MyPCO);
  MyPCO.send(send1);
  T.start;
  alt {
    [] MyPCO.receive("hi") { T.stop; }
    [] T.timeout { setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }

  var MQTT_Data send2 := {"hello2", "pub_test",omit};
  MyPCO.send(send2);
  T.start;
  alt {
    [] MyPCO.receive("hi") { T.stop;}
    [] T.timeout { setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }

  var MQTT_Data send3 := {"hello3", omit,omit};
  MyPCO.send(send3);
  T.start;
  alt {
    [] MyPCO.receive("hi") { T.stop; setverdict(pass); }
    [] T.timeout { setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }
  unmap(mtc:MyPCO, system:MyPCO);
}

testcase HelloW1() runs on MTCType system MTCType
{
  timer T := 20.0;
  map(mtc:MyPCO, system:MyPCO);
  MyPCO.send("Hello!");
  T.start;
  alt {
    [] MyPCO.receive("hi") { T.stop; setverdict(pass); }
    [] T.timeout { setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }
  unmap(mtc:MyPCO, system:MyPCO);
}

testcase HelloW2() runs on MTCType system MTCType
{
  timer T := 20.0;
  map(mtc:MyPCO, system:MyPCO);
  MyPCO.send("Good Bye!");
  T.start;
  alt {
    [] MyPCO.receive("bye") { T.stop; setverdict(pass); }
    [] T.timeout { setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }
  unmap(mtc:MyPCO, system:MyPCO);
}

control
{
  execute(HelloW0());
  execute(HelloW1());
  execute(HelloW2());
}
}

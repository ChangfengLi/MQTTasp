/******************************************************************************
 * Copyright (c) 2000-2021 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Lovassy, Arpad
 *   Szabo, Janos Zoltan â€“ initial implementation
 *
 ******************************************************************************/
// This Test Port skeleton header file was generated by the
// TTCN-3 Compiler of the TTCN-3 Test Executor version CRL 113 200/4 R2A
// for Arpad Lovassy (earplov@esekilxxen1841) on Tue Jul 22 16:49:55 2014
// You may modify this file. Add your attributes and prototypes of your
// member functions here.

#ifndef PCOType_HH
#define PCOType_HH

#include "MyExample.hh"
#include "MQTTClient.h"

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <sys/select.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

namespace MyExample {
class PCOType : public PCOType_BASE {
public:
	PCOType(const char *par_port_name = NULL);
	~PCOType();
	void set_parameter(const char *parameter_name,const char *parameter_value);
	void Event_Handler(const fd_set *read_fds,const fd_set *write_fds, const fd_set *error_fds,
		double time_since_last_call);
	static void delivered(void *context, MQTTClient_deliveryToken dt);
	static int msgarrvd(void *context, char *topicName, int topicLen, MQTTClient_message *message);//mqtt sub
	static void connlost(void *context, char *cause);
	volatile MQTTClient_deliveryToken deliveredtoken;

private:
	MQTTClient client;
    MQTTClient_connectOptions conn_opts;
    MQTTClient_message pubmsg;
    MQTTClient_deliveryToken token;
    int rc;
	int target_fd;
	struct sockaddr_in localAddr;

protected:
	void user_map(const char *system_port);
	void user_unmap(const char *system_port);

	void user_start();
	void user_stop();

	void outgoing_send(const CHARSTRING& send_par);
	void setUpSocket();
	void closeDownSocket();
	//unsigned long getHostId(const char* destHostName);

	
};

} /* end of namespace */

#endif
